{
  "time" : 1560845515750,
  "blocks" : [
    {
      "type" : "header",
      "data" : {
        "text" : "Editor.js",
        "level" : 1
      }
    },
    {
      "type" : "paragraph",
      "data" : {
        "text" : "Hey. Meet the new Editor. On this page you can see it in action — try to edit this text."
      }
    },
    {
      "type" : "header",
      "data" : {
        "text" : "Key features",
        "level" : 3
      }
    },
    {
      "type" : "list",
      "data" : {
        "style" : "unordered",
        "items" : [
          "It is a block-styled editor",
          "It returns clean data output in JSON",
          "Designed to be extendable and pluggable with a simple API"
        ]
      }
    },
    {
      "type" : "header",
      "data" : {
        "text" : "What does it mean «block-styled editor»",
        "level" : 3
      }
    },
    {
      "type" : "paragraph",
      "data" : {
        "text" : "Workspace in classic editors is made of a single contenteditable element, used to create different HTML markups. Editor.js <mark class=\"cdx-marker\">workspace consists of separate Blocks: paragraphs, headings, images, lists, quotes, etc</mark>. Each of them is an independent contenteditable element (or more complex structure) provided by Plugin and united by Editor's Core."
      }
    },
    {
      "type" : "paragraph",
      "data" : {
        "text" : "There are dozens of <a href=\"https://github.com/editor-js\">ready-to-use Blocks</a> and the <a href=\"https://editorjs.io/creating-a-block-tool\">simple API</a> for creation any Block you need. For example, you can implement Blocks for Tweets, Instagram posts, surveys and polls, CTA-buttons and even games."
      }
    },
    {
      "type" : "header",
      "data" : {
        "text" : "What does it mean clean data output",
        "level" : 3
      }
    },
    {
      "type" : "paragraph",
      "data" : {
        "text" : "Classic WYSIWYG-editors produce raw HTML-markup with both content data and content appearance. On the contrary, <a href=\"https://github.com/editor-js\">Editor.js</a> outputs JSON object with data of each Block. You can see an example below"
      }
    },
    {
      "type" : "paragraph",
      "data" : {
        "text" : "Given data can be used as you want: render with HTML for <code class=\"inline-code\">Web clients</code>, render natively for <code class=\"inline-code\">mobile apps</code>, create markup for <code class=\"inline-code\">Facebook Instant Articles</code> or <code class=\"inline-code\">Google AMP</code>, generate an <code class=\"inline-code\">audio version</code> and so on."
      }
    },
    {
      "type" : "paragraph",
      "data" : {
        "text" : "Clean data is useful to sanitize, validate and process on the backend."
      }
    },
    {
      "type" : "delimiter",
      "data" : {}
    },
    {
      "type" : "paragraph",
      "data" : {
        "text" : "89146206190"
      }
    },{
      "type" : "delimiter",
      "data" : {}
    },
    {
      "type" : "paragraph",
      "data" : {
        "text" : "89146206190"
      }
    },{
      "type" : "delimiter",
      "data" : {}
    },
    {
      "type" : "paragraph",
      "data" : {
        "text" : "89146206190"
      }
    },{
      "type" : "delimiter",
      "data" : {}
    },
    {
      "type" : "paragraph",
      "data" : {
        "text" : "89146206190"
      }
    },
    {
      "type": "image",
      "data": {
        "file": {
          "url": "https:\/\/static.tildacdn.com\/tild6366-6666-4765-b065-633965636536\/logo.png"
        },

        "withBorder": false,
        "stretched": true,
        "withBackground": false
      }
    },
    {
      "type" : "image",
      "data" : {
        "file" : {
          "url" : "https://vesort.ru/wa-data/public/photos/70/00/70/70.1500x0.jpg"
        },
        "caption" : "Here could be some caption for this picture",
        "withBorder" : false,
        "stretched" : true,
        "withBackground" : true
      }
    },
    {
      "type" : "rawTool",
      "data" : {
        "html" : "<h1>Header</h1>\n  <!-- Комментарий -->\n  <p>First paragraph.</p>\n  <p>Second paragraph.</p>"
      }
    },
    {
      "type" : "table",
      "data" : {
        "content" : [
          [
            "1",
            "2",
            "3",
            "4"
          ],
          [
            "5",
            "6",
            "7",
            "8"
          ],
          [
            "9",
            "10",
            "11",
            "12"
          ]
        ]
      }
    }
  ],
  "version" : "2.12.3"
}